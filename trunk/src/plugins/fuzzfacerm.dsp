// generated automatically
// DO NOT MODIFY!
declare id "fuzzfacerm";
declare name "Fuzz Face Mayer";
declare category "Fuzz";
declare shortname "FF Mayer";
declare description "Roger Mayer Fuzz Face simulation";
declare insert_p "tranyclipper3";

import("stdfaust.lib");
import("trany.lib");

p1 = pre : fi.highpass(1, 31.0) : *(0.5) :fi.iir((b0/a0,b1/a0,b2/a0,b3/a0),(a1/a0,a2/a0,a3/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;



    Fuzz = vslider("Fuzz[name:Fuzz][style:knob]", 0.5, 0, 1, 0.01) : Inverted(1) : si.smooth(s);


    Level = vslider("Level[name:Level][style:knob]", 0.5, 0, 1, 0.01) : Inverted(1) : si.smooth(s);

    b0 = Fuzz*(Fuzz*(4.47934572018789e-14*Level*pow(fs,3) - 4.57076093896724e-14*pow(fs,3)) + 2.18700234205204e-12*Level*pow(fs,3) - 2.23163504291024e-12*pow(fs,3)) + Level*pow(fs,2)*(-2.23179579925392e-12*fs - 2.84573657056975e-11) + pow(fs,2)*(2.27734265229992e-12*fs + 2.90381282711199e-11);

    b1 = Fuzz*(Fuzz*(-1.34380371605637e-13*Level*pow(fs,3) + 1.37122828169017e-13*pow(fs,3)) - 6.56100702615611e-12*Level*pow(fs,3) + 6.69490512873073e-12*pow(fs,3)) + Level*pow(fs,2)*(6.69538739776175e-12*fs + 2.84573657056975e-11) + pow(fs,2)*(-6.83202795689975e-12*fs - 2.90381282711199e-11);

    b2 = Fuzz*(Fuzz*(1.34380371605637e-13*Level*pow(fs,3) - 1.37122828169017e-13*pow(fs,3)) + 6.56100702615611e-12*Level*pow(fs,3) - 6.69490512873073e-12*pow(fs,3)) + Level*pow(fs,2)*(-6.69538739776175e-12*fs + 2.84573657056975e-11) + pow(fs,2)*(6.83202795689975e-12*fs - 2.90381282711199e-11);

    b3 = Fuzz*(Fuzz*(-4.47934572018789e-14*Level*pow(fs,3) + 4.57076093896724e-14*pow(fs,3)) - 2.18700234205204e-12*Level*pow(fs,3) + 2.23163504291024e-12*pow(fs,3)) + Level*pow(fs,2)*(2.23179579925392e-12*fs - 2.84573657056975e-11) + pow(fs,2)*(-2.27734265229992e-12*fs + 2.90381282711199e-11);

    a0 = Fuzz*(Fuzz*(Level*(Level*fs*(fs*(-6.18674113483609e-29*fs - 4.00204024233052e-26) + 1.7030426647183e-40) + fs*(fs*(-1.26260023160286e-31*fs - 2.15993464234427e-28) - 8.68875432551141e-26)) + fs*(fs*(-3.22405124499315e-14*fs - 2.0889804323188e-11) - 2.21645802812521e-11)) + Level*(Level*fs*(fs*(5.85504587207816e-29*fs + 4.00083345988591e-26) - 1.70252912615652e-40) + fs*(fs*(1.19490732083574e-31*fs + 2.08767462535429e-28) + 8.6861343028353e-26)) + fs*(fs*(3.05119731405503e-14*fs + 2.08816784713571e-11) + 2.21578967336724e-11)) + Level*(Level*(fs*(fs*(3.31695262757923e-30*fs + 8.26872374145393e-28) + 5.00405878096892e-25) - 2.12944525410009e-39) + fs*(fs*(6.76929107671191e-33*fs + 8.88886812696087e-30) + 2.81644355092887e-27) + 1.08642179352344e-24) + fs*(fs*(1.72853930938125e-15*fs + 4.32738998822245e-13) + 2.61230810735315e-10) + 2.77140797860398e-10;

    a1 = Fuzz*(Fuzz*(Level*(Level*fs*(fs*(1.85602234045083e-28*fs + 4.00204024233052e-26) + 1.7030426647183e-40) + fs*(fs*(3.78780069480857e-31*fs + 2.15993464234427e-28) - 8.68875432551141e-26)) + fs*(fs*(9.67215373497945e-14*fs + 2.0889804323188e-11) - 2.21645802812521e-11)) + Level*(Level*fs*(fs*(-1.75651376162345e-28*fs - 4.00083345988591e-26) - 1.70252912615652e-40) + fs*(fs*(-3.58472196250721e-31*fs - 2.08767462535429e-28) + 8.6861343028353e-26)) + fs*(fs*(-9.15359194216508e-14*fs - 2.08816784713571e-11) + 2.21578967336724e-11)) + Level*(Level*(fs*(fs*(-9.9508578827377e-30*fs - 8.26872374145393e-28) + 5.00405878096892e-25) - 6.38833576230027e-39) + fs*(fs*(-2.03078732301357e-32*fs - 8.88886812696087e-30) + 2.81644355092887e-27) + 3.25926538057032e-24) + fs*(fs*(-5.18561792814375e-15*fs - 4.32738998822245e-13) + 2.61230810735315e-10) + 8.31422393581194e-10;

    a2 = Fuzz*(Fuzz*(Level*(Level*fs*(fs*(-1.85602234045083e-28*fs + 4.00204024233052e-26) - 1.7030426647183e-40) + fs*(fs*(-3.78780069480857e-31*fs + 2.15993464234427e-28) + 8.68875432551141e-26)) + fs*(fs*(-9.67215373497945e-14*fs + 2.0889804323188e-11) + 2.21645802812521e-11)) + Level*(Level*fs*(fs*(1.75651376162345e-28*fs - 4.00083345988591e-26) + 1.70252912615652e-40) + fs*(fs*(3.58472196250721e-31*fs - 2.08767462535429e-28) - 8.6861343028353e-26)) + fs*(fs*(9.15359194216508e-14*fs - 2.08816784713571e-11) - 2.21578967336724e-11)) + Level*(Level*(fs*(fs*(9.9508578827377e-30*fs - 8.26872374145393e-28) - 5.00405878096892e-25) - 6.38833576230027e-39) + fs*(fs*(2.03078732301357e-32*fs - 8.88886812696087e-30) - 2.81644355092887e-27) + 3.25926538057032e-24) + fs*(fs*(5.18561792814375e-15*fs - 4.32738998822245e-13) - 2.61230810735315e-10) + 8.31422393581194e-10;

    a3 = Fuzz*(Fuzz*(Level*(Level*fs*(fs*(6.18674113483609e-29*fs - 4.00204024233052e-26) - 1.7030426647183e-40) + fs*(fs*(1.26260023160286e-31*fs - 2.15993464234427e-28) + 8.68875432551141e-26)) + fs*(fs*(3.22405124499315e-14*fs - 2.0889804323188e-11) + 2.21645802812521e-11)) + Level*(Level*fs*(fs*(-5.85504587207816e-29*fs + 4.00083345988591e-26) + 1.70252912615652e-40) + fs*(fs*(-1.19490732083574e-31*fs + 2.08767462535429e-28) - 8.6861343028353e-26)) + fs*(fs*(-3.05119731405503e-14*fs + 2.08816784713571e-11) - 2.21578967336724e-11)) + Level*(Level*(fs*(fs*(-3.31695262757923e-30*fs + 8.26872374145393e-28) - 5.00405878096892e-25) - 2.12944525410009e-39) + fs*(fs*(-6.76929107671191e-33*fs + 8.88886812696087e-30) - 2.81644355092887e-27) + 1.08642179352344e-24) + fs*(fs*(-1.72853930938125e-15*fs + 4.32738998822245e-13) - 2.61230810735315e-10) + 2.77140797860398e-10;
};

process =  p1 ;
