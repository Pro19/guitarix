// generated from file '../src/LV2/faust/gxamp7_stereo.dsp' by dsp2cc:
// Code generated with Faust (https://faust.grame.fr)

#include "valve.h"

namespace gxamp7_stereo {

class Dsp: public PluginLV2 {
private:
	uint32_t fSampleRate;
	FAUSTFLOAT fCheckbox0;
	FAUSTFLOAT	*fCheckbox0_;
	double fConst4;
	double fConst6;
	double fConst7;
	FAUSTFLOAT fVslider0;
	FAUSTFLOAT	*fVslider0_;
	double fConst10;
	double fConst12;
	double fConst14;
	double fConst15;
	double fConst17;
	double fConst19;
	double fConst20;
	double fConst23;
	FAUSTFLOAT fCheckbox1;
	FAUSTFLOAT	*fCheckbox1_;
	double fRec29[2];
	double fRec28[3];
	double fConst25;
	double fVec0[2];
	double fConst26;
	double fRec30[2];
	double fRec27[2];
	double fConst27;
	double fConst28;
	double fRec26[2];
	double fConst30;
	double fConst31;
	double fRec31[2];
	double fRec41[2];
	double fRec40[3];
	double fConst33;
	double fVec1[2];
	double fConst34;
	double fRec42[2];
	double fRec39[2];
	double fRec38[2];
	double fRec43[2];
	FAUSTFLOAT fVslider1;
	FAUSTFLOAT	*fVslider1_;
	double fRec48[2];
	double fVec2[2];
	double fRec47[2];
	double fRec46[3];
	double fConst36;
	double fVec3[2];
	double fConst37;
	double fRec49[2];
	double fRec45[2];
	double fRec44[2];
	double fRec50[2];
	double fRec37[3];
	double fRec36[2];
	double fRec35[2];
	double fRec34[3];
	double fVec4[2];
	double fRec51[2];
	double fRec33[2];
	double fRec32[2];
	double fRec52[2];
	double fRec25[3];
	double fRec24[2];
	double fRec23[3];
	double fVec5[2];
	double fRec53[2];
	double fRec22[2];
	double fRec21[2];
	double fRec54[2];
	FAUSTFLOAT fVslider2;
	FAUSTFLOAT	*fVslider2_;
	double fRec55[2];
	double fRec56[2];
	int IOTA;
	double fVec6[32768];
	double fConst38;
	int iConst39;
	double fRec58[2];
	double fRec57[2];
	double fConst40;
	double fConst41;
	double fRec20[3];
	double fVec7[2];
	double fRec19[2];
	double fRec18[2];
	double fConst42;
	double fConst44;
	double fConst45;
	double fRec17[3];
	double fVec8[2];
	double fConst46;
	double fConst47;
	double fConst48;
	double fRec16[2];
	double fConst49;
	double fConst50;
	double fRec15[3];
	double fConst51;
	double fConst55;
	double fConst56;
	double fConst57;
	double fConst59;
	double fConst60;
	double fRec14[3];
	double fConst61;
	double fRec62[2];
	double fRec61[3];
	double fConst62;
	double fConst63;
	double fConst64;
	double fRec60[3];
	double fRec59[3];
	double fConst65;
	double fConst66;
	double fConst67;
	double fRec66[2];
	double fRec65[3];
	double fVec9[2];
	double fConst68;
	double fConst69;
	double fRec64[2];
	double fConst70;
	double fRec63[3];
	double fConst71;
	double fConst72;
	double fRec68[2];
	double fRec67[3];
	double fVec10[2];
	double fRec13[2];
	double fVec11[2];
	double fRec12[2];
	FAUSTFLOAT fVslider3;
	FAUSTFLOAT	*fVslider3_;
	double fRec69[2];
	double fVec12[2];
	double fRec11[2];
	double fRec10[3];
	double fVec13[2];
	double fRec70[2];
	double fRec9[2];
	double fRec8[2];
	double fRec71[2];
	double fVec14[2];
	double fRec74[2];
	double fRec73[2];
	double fRec72[2];
	double fRec75[2];
	double fRec6[2];
	double fRec4[2];
	double fRec2[2];
	double fRec0[2];
	double fRec105[2];
	double fRec104[3];
	double fVec15[2];
	double fRec106[2];
	double fRec103[2];
	double fRec102[2];
	double fRec107[2];
	double fRec117[2];
	double fRec116[3];
	double fVec16[2];
	double fRec118[2];
	double fRec115[2];
	double fRec114[2];
	double fRec119[2];
	double fVec17[2];
	double fRec123[2];
	double fRec122[3];
	double fVec18[2];
	double fRec124[2];
	double fRec121[2];
	double fRec120[2];
	double fRec125[2];
	double fRec113[3];
	double fRec112[2];
	double fRec111[2];
	double fRec110[3];
	double fVec19[2];
	double fRec126[2];
	double fRec109[2];
	double fRec108[2];
	double fRec127[2];
	double fRec101[3];
	double fRec100[2];
	double fRec99[3];
	double fVec20[2];
	double fRec128[2];
	double fRec98[2];
	double fRec97[2];
	double fRec129[2];
	double fRec130[2];
	double fVec21[32768];
	double fRec132[2];
	double fRec131[2];
	double fRec96[3];
	double fVec22[2];
	double fRec95[2];
	double fRec94[2];
	double fRec93[3];
	double fVec23[2];
	double fRec92[2];
	double fRec91[3];
	double fRec90[3];
	double fRec136[2];
	double fRec135[3];
	double fRec134[3];
	double fRec133[3];
	double fRec140[2];
	double fRec139[3];
	double fVec24[2];
	double fRec138[2];
	double fRec137[3];
	double fRec142[2];
	double fRec141[3];
	double fVec25[2];
	double fRec89[2];
	double fVec26[2];
	double fRec88[2];
	double fVec27[2];
	double fRec87[2];
	double fRec86[3];
	double fVec28[2];
	double fRec143[2];
	double fRec85[2];
	double fRec84[2];
	double fRec144[2];
	double fVec29[2];
	double fRec147[2];
	double fRec146[2];
	double fRec145[2];
	double fRec148[2];
	double fRec82[2];
	double fRec80[2];
	double fRec78[2];
	double fRec76[2];

	void connect(uint32_t port,void* data);
	void clear_state_f();
	void init(uint32_t sample_rate);
	void compute(int count, FAUSTFLOAT *input0, FAUSTFLOAT *input1, FAUSTFLOAT *output0, FAUSTFLOAT *output1);

	static void clear_state_f_static(PluginLV2*);
	static void init_static(uint32_t sample_rate, PluginLV2*);
	static void compute_static(int count, FAUSTFLOAT *input0, FAUSTFLOAT *input1, FAUSTFLOAT *output0, FAUSTFLOAT *output1, PluginLV2*);
	static void del_instance(PluginLV2 *p);
	static void connect_static(uint32_t port,void* data, PluginLV2 *p);
public:
	Dsp();
	~Dsp();
};



Dsp::Dsp()
	: PluginLV2() {
	version = PLUGINLV2_VERSION;
	id = "pre 12ax7/ push-pull 6V6";
	name = N_("pre 12ax7/ push-pull 6V6");
	mono_audio = 0;
	stereo_audio = compute_static;
	set_samplerate = init_static;
	activate_plugin = 0;
	connect_ports = connect_static;
	clear_state = clear_state_f_static;
	delete_instance = del_instance;
}

Dsp::~Dsp() {
}

inline void Dsp::clear_state_f()
{
	for (int l0 = 0; (l0 < 2); l0 = (l0 + 1)) fRec29[l0] = 0.0;
	for (int l1 = 0; (l1 < 3); l1 = (l1 + 1)) fRec28[l1] = 0.0;
	for (int l2 = 0; (l2 < 2); l2 = (l2 + 1)) fVec0[l2] = 0.0;
	for (int l3 = 0; (l3 < 2); l3 = (l3 + 1)) fRec30[l3] = 0.0;
	for (int l4 = 0; (l4 < 2); l4 = (l4 + 1)) fRec27[l4] = 0.0;
	for (int l5 = 0; (l5 < 2); l5 = (l5 + 1)) fRec26[l5] = 0.0;
	for (int l6 = 0; (l6 < 2); l6 = (l6 + 1)) fRec31[l6] = 0.0;
	for (int l7 = 0; (l7 < 2); l7 = (l7 + 1)) fRec41[l7] = 0.0;
	for (int l8 = 0; (l8 < 3); l8 = (l8 + 1)) fRec40[l8] = 0.0;
	for (int l9 = 0; (l9 < 2); l9 = (l9 + 1)) fVec1[l9] = 0.0;
	for (int l10 = 0; (l10 < 2); l10 = (l10 + 1)) fRec42[l10] = 0.0;
	for (int l11 = 0; (l11 < 2); l11 = (l11 + 1)) fRec39[l11] = 0.0;
	for (int l12 = 0; (l12 < 2); l12 = (l12 + 1)) fRec38[l12] = 0.0;
	for (int l13 = 0; (l13 < 2); l13 = (l13 + 1)) fRec43[l13] = 0.0;
	for (int l14 = 0; (l14 < 2); l14 = (l14 + 1)) fRec48[l14] = 0.0;
	for (int l15 = 0; (l15 < 2); l15 = (l15 + 1)) fVec2[l15] = 0.0;
	for (int l16 = 0; (l16 < 2); l16 = (l16 + 1)) fRec47[l16] = 0.0;
	for (int l17 = 0; (l17 < 3); l17 = (l17 + 1)) fRec46[l17] = 0.0;
	for (int l18 = 0; (l18 < 2); l18 = (l18 + 1)) fVec3[l18] = 0.0;
	for (int l19 = 0; (l19 < 2); l19 = (l19 + 1)) fRec49[l19] = 0.0;
	for (int l20 = 0; (l20 < 2); l20 = (l20 + 1)) fRec45[l20] = 0.0;
	for (int l21 = 0; (l21 < 2); l21 = (l21 + 1)) fRec44[l21] = 0.0;
	for (int l22 = 0; (l22 < 2); l22 = (l22 + 1)) fRec50[l22] = 0.0;
	for (int l23 = 0; (l23 < 3); l23 = (l23 + 1)) fRec37[l23] = 0.0;
	for (int l24 = 0; (l24 < 2); l24 = (l24 + 1)) fRec36[l24] = 0.0;
	for (int l25 = 0; (l25 < 2); l25 = (l25 + 1)) fRec35[l25] = 0.0;
	for (int l26 = 0; (l26 < 3); l26 = (l26 + 1)) fRec34[l26] = 0.0;
	for (int l27 = 0; (l27 < 2); l27 = (l27 + 1)) fVec4[l27] = 0.0;
	for (int l28 = 0; (l28 < 2); l28 = (l28 + 1)) fRec51[l28] = 0.0;
	for (int l29 = 0; (l29 < 2); l29 = (l29 + 1)) fRec33[l29] = 0.0;
	for (int l30 = 0; (l30 < 2); l30 = (l30 + 1)) fRec32[l30] = 0.0;
	for (int l31 = 0; (l31 < 2); l31 = (l31 + 1)) fRec52[l31] = 0.0;
	for (int l32 = 0; (l32 < 3); l32 = (l32 + 1)) fRec25[l32] = 0.0;
	for (int l33 = 0; (l33 < 2); l33 = (l33 + 1)) fRec24[l33] = 0.0;
	for (int l34 = 0; (l34 < 3); l34 = (l34 + 1)) fRec23[l34] = 0.0;
	for (int l35 = 0; (l35 < 2); l35 = (l35 + 1)) fVec5[l35] = 0.0;
	for (int l36 = 0; (l36 < 2); l36 = (l36 + 1)) fRec53[l36] = 0.0;
	for (int l37 = 0; (l37 < 2); l37 = (l37 + 1)) fRec22[l37] = 0.0;
	for (int l38 = 0; (l38 < 2); l38 = (l38 + 1)) fRec21[l38] = 0.0;
	for (int l39 = 0; (l39 < 2); l39 = (l39 + 1)) fRec54[l39] = 0.0;
	for (int l40 = 0; (l40 < 2); l40 = (l40 + 1)) fRec55[l40] = 0.0;
	for (int l41 = 0; (l41 < 2); l41 = (l41 + 1)) fRec56[l41] = 0.0;
	for (int l42 = 0; (l42 < 32768); l42 = (l42 + 1)) fVec6[l42] = 0.0;
	for (int l43 = 0; (l43 < 2); l43 = (l43 + 1)) fRec58[l43] = 0.0;
	for (int l44 = 0; (l44 < 2); l44 = (l44 + 1)) fRec57[l44] = 0.0;
	for (int l45 = 0; (l45 < 3); l45 = (l45 + 1)) fRec20[l45] = 0.0;
	for (int l46 = 0; (l46 < 2); l46 = (l46 + 1)) fVec7[l46] = 0.0;
	for (int l47 = 0; (l47 < 2); l47 = (l47 + 1)) fRec19[l47] = 0.0;
	for (int l48 = 0; (l48 < 2); l48 = (l48 + 1)) fRec18[l48] = 0.0;
	for (int l49 = 0; (l49 < 3); l49 = (l49 + 1)) fRec17[l49] = 0.0;
	for (int l50 = 0; (l50 < 2); l50 = (l50 + 1)) fVec8[l50] = 0.0;
	for (int l51 = 0; (l51 < 2); l51 = (l51 + 1)) fRec16[l51] = 0.0;
	for (int l52 = 0; (l52 < 3); l52 = (l52 + 1)) fRec15[l52] = 0.0;
	for (int l53 = 0; (l53 < 3); l53 = (l53 + 1)) fRec14[l53] = 0.0;
	for (int l54 = 0; (l54 < 2); l54 = (l54 + 1)) fRec62[l54] = 0.0;
	for (int l55 = 0; (l55 < 3); l55 = (l55 + 1)) fRec61[l55] = 0.0;
	for (int l56 = 0; (l56 < 3); l56 = (l56 + 1)) fRec60[l56] = 0.0;
	for (int l57 = 0; (l57 < 3); l57 = (l57 + 1)) fRec59[l57] = 0.0;
	for (int l58 = 0; (l58 < 2); l58 = (l58 + 1)) fRec66[l58] = 0.0;
	for (int l59 = 0; (l59 < 3); l59 = (l59 + 1)) fRec65[l59] = 0.0;
	for (int l60 = 0; (l60 < 2); l60 = (l60 + 1)) fVec9[l60] = 0.0;
	for (int l61 = 0; (l61 < 2); l61 = (l61 + 1)) fRec64[l61] = 0.0;
	for (int l62 = 0; (l62 < 3); l62 = (l62 + 1)) fRec63[l62] = 0.0;
	for (int l63 = 0; (l63 < 2); l63 = (l63 + 1)) fRec68[l63] = 0.0;
	for (int l64 = 0; (l64 < 3); l64 = (l64 + 1)) fRec67[l64] = 0.0;
	for (int l65 = 0; (l65 < 2); l65 = (l65 + 1)) fVec10[l65] = 0.0;
	for (int l66 = 0; (l66 < 2); l66 = (l66 + 1)) fRec13[l66] = 0.0;
	for (int l67 = 0; (l67 < 2); l67 = (l67 + 1)) fVec11[l67] = 0.0;
	for (int l68 = 0; (l68 < 2); l68 = (l68 + 1)) fRec12[l68] = 0.0;
	for (int l69 = 0; (l69 < 2); l69 = (l69 + 1)) fRec69[l69] = 0.0;
	for (int l70 = 0; (l70 < 2); l70 = (l70 + 1)) fVec12[l70] = 0.0;
	for (int l71 = 0; (l71 < 2); l71 = (l71 + 1)) fRec11[l71] = 0.0;
	for (int l72 = 0; (l72 < 3); l72 = (l72 + 1)) fRec10[l72] = 0.0;
	for (int l73 = 0; (l73 < 2); l73 = (l73 + 1)) fVec13[l73] = 0.0;
	for (int l74 = 0; (l74 < 2); l74 = (l74 + 1)) fRec70[l74] = 0.0;
	for (int l75 = 0; (l75 < 2); l75 = (l75 + 1)) fRec9[l75] = 0.0;
	for (int l76 = 0; (l76 < 2); l76 = (l76 + 1)) fRec8[l76] = 0.0;
	for (int l77 = 0; (l77 < 2); l77 = (l77 + 1)) fRec71[l77] = 0.0;
	for (int l78 = 0; (l78 < 2); l78 = (l78 + 1)) fVec14[l78] = 0.0;
	for (int l79 = 0; (l79 < 2); l79 = (l79 + 1)) fRec74[l79] = 0.0;
	for (int l80 = 0; (l80 < 2); l80 = (l80 + 1)) fRec73[l80] = 0.0;
	for (int l81 = 0; (l81 < 2); l81 = (l81 + 1)) fRec72[l81] = 0.0;
	for (int l82 = 0; (l82 < 2); l82 = (l82 + 1)) fRec75[l82] = 0.0;
	for (int l83 = 0; (l83 < 2); l83 = (l83 + 1)) fRec6[l83] = 0.0;
	for (int l84 = 0; (l84 < 2); l84 = (l84 + 1)) fRec4[l84] = 0.0;
	for (int l85 = 0; (l85 < 2); l85 = (l85 + 1)) fRec2[l85] = 0.0;
	for (int l86 = 0; (l86 < 2); l86 = (l86 + 1)) fRec0[l86] = 0.0;
	for (int l87 = 0; (l87 < 2); l87 = (l87 + 1)) fRec105[l87] = 0.0;
	for (int l88 = 0; (l88 < 3); l88 = (l88 + 1)) fRec104[l88] = 0.0;
	for (int l89 = 0; (l89 < 2); l89 = (l89 + 1)) fVec15[l89] = 0.0;
	for (int l90 = 0; (l90 < 2); l90 = (l90 + 1)) fRec106[l90] = 0.0;
	for (int l91 = 0; (l91 < 2); l91 = (l91 + 1)) fRec103[l91] = 0.0;
	for (int l92 = 0; (l92 < 2); l92 = (l92 + 1)) fRec102[l92] = 0.0;
	for (int l93 = 0; (l93 < 2); l93 = (l93 + 1)) fRec107[l93] = 0.0;
	for (int l94 = 0; (l94 < 2); l94 = (l94 + 1)) fRec117[l94] = 0.0;
	for (int l95 = 0; (l95 < 3); l95 = (l95 + 1)) fRec116[l95] = 0.0;
	for (int l96 = 0; (l96 < 2); l96 = (l96 + 1)) fVec16[l96] = 0.0;
	for (int l97 = 0; (l97 < 2); l97 = (l97 + 1)) fRec118[l97] = 0.0;
	for (int l98 = 0; (l98 < 2); l98 = (l98 + 1)) fRec115[l98] = 0.0;
	for (int l99 = 0; (l99 < 2); l99 = (l99 + 1)) fRec114[l99] = 0.0;
	for (int l100 = 0; (l100 < 2); l100 = (l100 + 1)) fRec119[l100] = 0.0;
	for (int l101 = 0; (l101 < 2); l101 = (l101 + 1)) fVec17[l101] = 0.0;
	for (int l102 = 0; (l102 < 2); l102 = (l102 + 1)) fRec123[l102] = 0.0;
	for (int l103 = 0; (l103 < 3); l103 = (l103 + 1)) fRec122[l103] = 0.0;
	for (int l104 = 0; (l104 < 2); l104 = (l104 + 1)) fVec18[l104] = 0.0;
	for (int l105 = 0; (l105 < 2); l105 = (l105 + 1)) fRec124[l105] = 0.0;
	for (int l106 = 0; (l106 < 2); l106 = (l106 + 1)) fRec121[l106] = 0.0;
	for (int l107 = 0; (l107 < 2); l107 = (l107 + 1)) fRec120[l107] = 0.0;
	for (int l108 = 0; (l108 < 2); l108 = (l108 + 1)) fRec125[l108] = 0.0;
	for (int l109 = 0; (l109 < 3); l109 = (l109 + 1)) fRec113[l109] = 0.0;
	for (int l110 = 0; (l110 < 2); l110 = (l110 + 1)) fRec112[l110] = 0.0;
	for (int l111 = 0; (l111 < 2); l111 = (l111 + 1)) fRec111[l111] = 0.0;
	for (int l112 = 0; (l112 < 3); l112 = (l112 + 1)) fRec110[l112] = 0.0;
	for (int l113 = 0; (l113 < 2); l113 = (l113 + 1)) fVec19[l113] = 0.0;
	for (int l114 = 0; (l114 < 2); l114 = (l114 + 1)) fRec126[l114] = 0.0;
	for (int l115 = 0; (l115 < 2); l115 = (l115 + 1)) fRec109[l115] = 0.0;
	for (int l116 = 0; (l116 < 2); l116 = (l116 + 1)) fRec108[l116] = 0.0;
	for (int l117 = 0; (l117 < 2); l117 = (l117 + 1)) fRec127[l117] = 0.0;
	for (int l118 = 0; (l118 < 3); l118 = (l118 + 1)) fRec101[l118] = 0.0;
	for (int l119 = 0; (l119 < 2); l119 = (l119 + 1)) fRec100[l119] = 0.0;
	for (int l120 = 0; (l120 < 3); l120 = (l120 + 1)) fRec99[l120] = 0.0;
	for (int l121 = 0; (l121 < 2); l121 = (l121 + 1)) fVec20[l121] = 0.0;
	for (int l122 = 0; (l122 < 2); l122 = (l122 + 1)) fRec128[l122] = 0.0;
	for (int l123 = 0; (l123 < 2); l123 = (l123 + 1)) fRec98[l123] = 0.0;
	for (int l124 = 0; (l124 < 2); l124 = (l124 + 1)) fRec97[l124] = 0.0;
	for (int l125 = 0; (l125 < 2); l125 = (l125 + 1)) fRec129[l125] = 0.0;
	for (int l126 = 0; (l126 < 2); l126 = (l126 + 1)) fRec130[l126] = 0.0;
	for (int l127 = 0; (l127 < 32768); l127 = (l127 + 1)) fVec21[l127] = 0.0;
	for (int l128 = 0; (l128 < 2); l128 = (l128 + 1)) fRec132[l128] = 0.0;
	for (int l129 = 0; (l129 < 2); l129 = (l129 + 1)) fRec131[l129] = 0.0;
	for (int l130 = 0; (l130 < 3); l130 = (l130 + 1)) fRec96[l130] = 0.0;
	for (int l131 = 0; (l131 < 2); l131 = (l131 + 1)) fVec22[l131] = 0.0;
	for (int l132 = 0; (l132 < 2); l132 = (l132 + 1)) fRec95[l132] = 0.0;
	for (int l133 = 0; (l133 < 2); l133 = (l133 + 1)) fRec94[l133] = 0.0;
	for (int l134 = 0; (l134 < 3); l134 = (l134 + 1)) fRec93[l134] = 0.0;
	for (int l135 = 0; (l135 < 2); l135 = (l135 + 1)) fVec23[l135] = 0.0;
	for (int l136 = 0; (l136 < 2); l136 = (l136 + 1)) fRec92[l136] = 0.0;
	for (int l137 = 0; (l137 < 3); l137 = (l137 + 1)) fRec91[l137] = 0.0;
	for (int l138 = 0; (l138 < 3); l138 = (l138 + 1)) fRec90[l138] = 0.0;
	for (int l139 = 0; (l139 < 2); l139 = (l139 + 1)) fRec136[l139] = 0.0;
	for (int l140 = 0; (l140 < 3); l140 = (l140 + 1)) fRec135[l140] = 0.0;
	for (int l141 = 0; (l141 < 3); l141 = (l141 + 1)) fRec134[l141] = 0.0;
	for (int l142 = 0; (l142 < 3); l142 = (l142 + 1)) fRec133[l142] = 0.0;
	for (int l143 = 0; (l143 < 2); l143 = (l143 + 1)) fRec140[l143] = 0.0;
	for (int l144 = 0; (l144 < 3); l144 = (l144 + 1)) fRec139[l144] = 0.0;
	for (int l145 = 0; (l145 < 2); l145 = (l145 + 1)) fVec24[l145] = 0.0;
	for (int l146 = 0; (l146 < 2); l146 = (l146 + 1)) fRec138[l146] = 0.0;
	for (int l147 = 0; (l147 < 3); l147 = (l147 + 1)) fRec137[l147] = 0.0;
	for (int l148 = 0; (l148 < 2); l148 = (l148 + 1)) fRec142[l148] = 0.0;
	for (int l149 = 0; (l149 < 3); l149 = (l149 + 1)) fRec141[l149] = 0.0;
	for (int l150 = 0; (l150 < 2); l150 = (l150 + 1)) fVec25[l150] = 0.0;
	for (int l151 = 0; (l151 < 2); l151 = (l151 + 1)) fRec89[l151] = 0.0;
	for (int l152 = 0; (l152 < 2); l152 = (l152 + 1)) fVec26[l152] = 0.0;
	for (int l153 = 0; (l153 < 2); l153 = (l153 + 1)) fRec88[l153] = 0.0;
	for (int l154 = 0; (l154 < 2); l154 = (l154 + 1)) fVec27[l154] = 0.0;
	for (int l155 = 0; (l155 < 2); l155 = (l155 + 1)) fRec87[l155] = 0.0;
	for (int l156 = 0; (l156 < 3); l156 = (l156 + 1)) fRec86[l156] = 0.0;
	for (int l157 = 0; (l157 < 2); l157 = (l157 + 1)) fVec28[l157] = 0.0;
	for (int l158 = 0; (l158 < 2); l158 = (l158 + 1)) fRec143[l158] = 0.0;
	for (int l159 = 0; (l159 < 2); l159 = (l159 + 1)) fRec85[l159] = 0.0;
	for (int l160 = 0; (l160 < 2); l160 = (l160 + 1)) fRec84[l160] = 0.0;
	for (int l161 = 0; (l161 < 2); l161 = (l161 + 1)) fRec144[l161] = 0.0;
	for (int l162 = 0; (l162 < 2); l162 = (l162 + 1)) fVec29[l162] = 0.0;
	for (int l163 = 0; (l163 < 2); l163 = (l163 + 1)) fRec147[l163] = 0.0;
	for (int l164 = 0; (l164 < 2); l164 = (l164 + 1)) fRec146[l164] = 0.0;
	for (int l165 = 0; (l165 < 2); l165 = (l165 + 1)) fRec145[l165] = 0.0;
	for (int l166 = 0; (l166 < 2); l166 = (l166 + 1)) fRec148[l166] = 0.0;
	for (int l167 = 0; (l167 < 2); l167 = (l167 + 1)) fRec82[l167] = 0.0;
	for (int l168 = 0; (l168 < 2); l168 = (l168 + 1)) fRec80[l168] = 0.0;
	for (int l169 = 0; (l169 < 2); l169 = (l169 + 1)) fRec78[l169] = 0.0;
	for (int l170 = 0; (l170 < 2); l170 = (l170 + 1)) fRec76[l170] = 0.0;
}

void Dsp::clear_state_f_static(PluginLV2 *p)
{
	static_cast<Dsp*>(p)->clear_state_f();
}

inline void Dsp::init(uint32_t sample_rate)
{
	fSampleRate = sample_rate;
	double fConst0 = std::min<double>(192000.0, std::max<double>(1.0, double(fSampleRate)));
	double fConst1 = std::tan((97.389372261283583 / fConst0));
	double fConst2 = (1.0 / fConst1);
	double fConst3 = (fConst2 + 1.0);
	fConst4 = (1.0 / (fConst1 * fConst3));
	double fConst5 = (1.0 / std::tan((20517.741620594938 / fConst0)));
	fConst6 = (1.0 / (fConst5 + 1.0));
	fConst7 = (1.0 - fConst5);
	double fConst8 = std::tan((3769.9111843077517 / fConst0));
	double fConst9 = (1.0 / fConst8);
	fConst10 = (1.0 / (((fConst9 + 1.0000000000000004) / fConst8) + 1.0));
	double fConst11 = mydsp_faustpower2_f(fConst8);
	fConst12 = (1.0 / fConst11);
	double fConst13 = std::tan((10053.096491487338 / fConst0));
	fConst14 = (1.0 / fConst13);
	fConst15 = (1.0 / (((fConst14 + 1.0000000000000004) / fConst13) + 1.0));
	double fConst16 = (fConst9 + 1.0);
	fConst17 = (1.0 / (fConst8 * fConst16));
	double fConst18 = (fConst14 + 1.0);
	fConst19 = (1.0 / fConst18);
	fConst20 = (1.0 - fConst14);
	double fConst21 = std::tan((47123.889803846898 / fConst0));
	double fConst22 = (1.0 / fConst21);
	fConst23 = (1.0 / (((fConst22 + 1.4142135623730949) / fConst21) + 1.0));
	double fConst24 = (1.0 / std::tan((609.46897479641984 / fConst0)));
	fConst25 = (1.0 / (fConst24 + 1.0));
	fConst26 = (1.0 - fConst24);
	fConst27 = (0.0 - fConst4);
	fConst28 = ((1.0 - fConst2) / fConst3);
	double fConst29 = (3.1415926535897931 / fConst0);
	fConst30 = (1.0 / (fConst29 + 1.0));
	fConst31 = (1.0 - fConst29);
	double fConst32 = (1.0 / std::tan((414.69023027385271 / fConst0)));
	fConst33 = (1.0 / (fConst32 + 1.0));
	fConst34 = (1.0 - fConst32);
	double fConst35 = (1.0 / std::tan((270.1769682087222 / fConst0)));
	fConst36 = (1.0 / (fConst35 + 1.0));
	fConst37 = (1.0 - fConst35);
	fConst38 = (0.009000000000000008 / fConst0);
	iConst39 = int(std::min<double>(65536.0, std::max<double>(0.0, (0.1111111111111111 * fConst0))));
	fConst40 = (((fConst22 + -1.4142135623730949) / fConst21) + 1.0);
	fConst41 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(fConst21))));
	fConst42 = (((fConst14 + -1.0000000000000004) / fConst13) + 1.0);
	double fConst43 = mydsp_faustpower2_f(fConst13);
	fConst44 = (1.0 / fConst43);
	fConst45 = (2.0 * (1.0 - fConst44));
	fConst46 = (0.0 - fConst17);
	fConst47 = (1.0 - fConst9);
	fConst48 = (fConst47 / fConst16);
	fConst49 = (((fConst9 + -1.0000000000000004) / fConst8) + 1.0);
	fConst50 = (2.0 * (1.0 - fConst12));
	fConst51 = (0.0 - (2.0 / fConst11));
	double fConst52 = std::tan((942.47779607693792 / fConst0));
	double fConst53 = (1.0 / fConst52);
	double fConst54 = (fConst53 + 1.0);
	fConst55 = (1.0 / ((fConst54 / fConst52) + 1.0));
	fConst56 = (1.0 - fConst53);
	fConst57 = (1.0 - (fConst56 / fConst52));
	double fConst58 = mydsp_faustpower2_f(fConst52);
	fConst59 = (1.0 / fConst58);
	fConst60 = (2.0 * (1.0 - fConst59));
	fConst61 = (0.0 - (1.0 / (fConst13 * fConst18)));
	fConst62 = (0.0 - (2.0 / fConst43));
	fConst63 = (1.0 / ((fConst16 / fConst8) + 1.0));
	fConst64 = (1.0 - (fConst47 / fConst8));
	fConst65 = (1.0 / (((fConst53 + 1.0000000000000004) / fConst52) + 1.0));
	fConst66 = (1.0 / (fConst52 * fConst54));
	fConst67 = (1.0 / fConst16);
	fConst68 = (0.0 - fConst66);
	fConst69 = (fConst56 / fConst54);
	fConst70 = (((fConst53 + -1.0000000000000004) / fConst52) + 1.0);
	fConst71 = (0.0 - (2.0 / fConst58));
	fConst72 = (1.0 / fConst54);
	IOTA = 0;
	clear_state_f();
}

void Dsp::init_static(uint32_t sample_rate, PluginLV2 *p)
{
	static_cast<Dsp*>(p)->init(sample_rate);
}

void always_inline Dsp::compute(int count, FAUSTFLOAT *input0, FAUSTFLOAT *input1, FAUSTFLOAT *output0, FAUSTFLOAT *output1)
{
#define fCheckbox0 (*fCheckbox0_)
#define fVslider0 (*fVslider0_)
#define fCheckbox1 (*fCheckbox1_)
#define fVslider1 (*fVslider1_)
#define fVslider2 (*fVslider2_)
#define fVslider3 (*fVslider3_)
	int iSlow0 = int(double(fCheckbox0));
	double fSlow1 = double(fVslider0);
	double fSlow2 = (2.0 * (fSlow1 + -0.5));
	double fSlow3 = (1.0 - std::max<double>(0.0, (-1.0 * fSlow2)));
	double fSlow4 = std::pow(10.0, (1.2 * fSlow1));
	int iSlow5 = int(double(fCheckbox1));
	double fSlow6 = (0.0010000000000000009 * std::pow(10.0, (0.050000000000000003 * double(fVslider1))));
	double fSlow7 = (1.0000000000000009e-05 * double(fVslider2));
	double fSlow8 = std::pow(10.0, (0.80000000000000004 * fSlow1));
	double fSlow9 = (fConst65 * std::pow(10.0, (2.0 * fSlow1)));
	double fSlow10 = (fConst65 * std::pow(10.0, (0.90000000000000002 * fSlow1)));
	double fSlow11 = (1.25 * fSlow1);
	double fSlow12 = (0.024937655860349125 * (1.0 - std::max<double>(0.0, fSlow2)));
	double fSlow13 = (0.0010000000000000009 * std::pow(10.0, (0.050000000000000003 * double(fVslider3))));
	for (int i0 = 0; (i0 < count); i0 = (i0 + 1)) {
		fRec29[0] = ((0.93028479253239138 * (fRec25[1] + fRec25[2])) - (0.86056958506478287 * fRec29[1]));
		fRec28[0] = (fRec29[0] - ((1.8405051250752198 * fRec28[1]) + (0.86129424393186271 * fRec28[2])));
		double fTemp0 = (0.92544984225177063 * (fRec28[0] + fRec28[2]));
		double fTemp1 = (1.8508996845035413 * fRec28[1]);
		double fTemp2 = ((fTemp1 + fTemp0) / (double(Ranode(int(TUBE_TABLE_12AX7_250k), double(fRec27[1]))) + 100000.0));
		fVec0[0] = fTemp2;
		fRec30[0] = (fConst25 * ((820.0 * (fTemp2 + fVec0[1])) - (fConst26 * fRec30[1])));
		fRec27[0] = (double(Ftube(int(TUBE_TABLE_12AX7_250k), double(((fTemp0 + (fRec30[0] + fTemp1)) + -0.84070299999999998)))) + -147.47524390243905);
		fRec26[0] = ((0.025000000000000001 * ((fConst4 * fRec27[0]) + (fConst27 * fRec27[1]))) - (fConst28 * fRec26[1]));
		fRec31[0] = (fConst30 * ((fConst31 * fRec31[1]) + (0.025000000000000001 * (fRec27[0] - fRec27[1]))));
		fRec41[0] = ((0.93028479253239138 * (fRec37[1] + fRec37[2])) - (0.86056958506478287 * fRec41[1]));
		fRec40[0] = (fRec41[0] - ((1.8405051250752198 * fRec40[1]) + (0.86129424393186271 * fRec40[2])));
		double fTemp3 = (0.92544984225177063 * (fRec40[0] + fRec40[2]));
		double fTemp4 = (1.8508996845035413 * fRec40[1]);
		double fTemp5 = ((fTemp4 + fTemp3) / (double(Ranode(int(TUBE_TABLE_12AX7_250k), double(fRec39[1]))) + 100000.0));
		fVec1[0] = fTemp5;
		fRec42[0] = (fConst33 * ((1500.0 * (fTemp5 + fVec1[1])) - (fConst34 * fRec42[1])));
		fRec39[0] = (double(Ftube(int(TUBE_TABLE_12AX7_250k), double(((fTemp3 + (fRec42[0] + fTemp4)) + -1.204285)))) + -169.71433333333334);
		fRec38[0] = ((0.025000000000000001 * ((fConst4 * fRec39[0]) + (fConst27 * fRec39[1]))) - (fConst28 * fRec38[1]));
		fRec43[0] = (fConst30 * ((fConst31 * fRec43[1]) + (0.025000000000000001 * (fRec39[0] - fRec39[1]))));
		fRec48[0] = (fSlow6 + (0.999 * fRec48[1]));
		double fTemp6 = (double(input0[i0]) * fRec48[0]);
		fVec2[0] = fTemp6;
		fRec47[0] = ((0.93028479253239138 * (fTemp6 + fVec2[1])) - (0.86056958506478287 * fRec47[1]));
		fRec46[0] = (fRec47[0] - ((1.8405051250752198 * fRec46[1]) + (0.86129424393186271 * fRec46[2])));
		double fTemp7 = (0.92544984225177063 * (fRec46[0] + fRec46[2]));
		double fTemp8 = (1.8508996845035413 * fRec46[1]);
		double fTemp9 = ((fTemp8 + fTemp7) / (double(Ranode(int(TUBE_TABLE_12AX7_68k), double(fRec45[1]))) + 100000.0));
		fVec3[0] = fTemp9;
		fRec49[0] = (fConst36 * ((2700.0 * (fTemp9 + fVec3[1])) - (fConst37 * fRec49[1])));
		fRec45[0] = (double(Ftube(int(TUBE_TABLE_12AX7_68k), double(((fTemp7 + (fRec49[0] + fTemp8)) + -1.581656)))) + -191.42014814814814);
		fRec44[0] = ((0.025000000000000001 * ((fConst4 * fRec45[0]) + (fConst27 * fRec45[1]))) - (fConst28 * fRec44[1]));
		fRec50[0] = (fConst30 * ((fConst31 * fRec50[1]) + (0.025000000000000001 * (fRec45[0] - fRec45[1]))));
		fRec37[0] = ((0.59999999999999998 * (iSlow5 ? fRec43[0] : fRec38[0])) + (iSlow5 ? fRec50[0] : fRec44[0]));
		fRec36[0] = (0.0 - (fConst6 * ((fConst7 * fRec36[1]) - (fRec37[0] + fRec37[1]))));
		fRec35[0] = ((0.93028479253239138 * (fRec36[0] + fRec36[1])) - (0.86056958506478287 * fRec35[1]));
		fRec34[0] = (fRec35[0] - ((1.8405051250752198 * fRec34[1]) + (0.86129424393186271 * fRec34[2])));
		double fTemp10 = (0.92544984225177063 * (fRec34[0] + fRec34[2]));
		double fTemp11 = (1.8508996845035413 * fRec34[1]);
		double fTemp12 = ((fTemp11 + fTemp10) / (double(Ranode(int(TUBE_TABLE_12AX7_250k), double(fRec33[1]))) + 100000.0));
		fVec4[0] = fTemp12;
		fRec51[0] = (fConst33 * ((1500.0 * (fTemp12 + fVec4[1])) - (fConst34 * fRec51[1])));
		fRec33[0] = (double(Ftube(int(TUBE_TABLE_12AX7_250k), double(((fTemp10 + (fRec51[0] + fTemp11)) + -1.204285)))) + -169.71433333333334);
		fRec32[0] = ((0.025000000000000001 * ((fConst4 * fRec33[0]) + (fConst27 * fRec33[1]))) - (fConst28 * fRec32[1]));
		fRec52[0] = (fConst30 * ((fConst31 * fRec52[1]) + (0.025000000000000001 * (fRec33[0] - fRec33[1]))));
		fRec25[0] = ((0.59999999999999998 * (iSlow5 ? fRec31[0] : fRec26[0])) + (iSlow5 ? fRec52[0] : fRec32[0]));
		fRec24[0] = ((0.93028479253239138 * (fRec25[0] + fRec25[1])) - (0.86056958506478287 * fRec24[1]));
		fRec23[0] = (fRec24[0] - ((1.8405051250752198 * fRec23[1]) + (0.86129424393186271 * fRec23[2])));
		double fTemp13 = (0.92544984225177063 * (fRec23[0] + fRec23[2]));
		double fTemp14 = (1.8508996845035413 * fRec23[1]);
		double fTemp15 = ((fTemp14 + fTemp13) / (double(Ranode(int(TUBE_TABLE_12AX7_250k), double(fRec22[1]))) + 100000.0));
		fVec5[0] = fTemp15;
		fRec53[0] = (fConst25 * ((820.0 * (fTemp15 + fVec5[1])) - (fConst26 * fRec53[1])));
		fRec22[0] = (double(Ftube(int(TUBE_TABLE_12AX7_250k), double(((fTemp13 + (fRec53[0] + fTemp14)) + -0.84070299999999998)))) + -147.47524390243905);
		fRec21[0] = ((0.025000000000000001 * ((fConst4 * fRec22[0]) + (fConst27 * fRec22[1]))) - (fConst28 * fRec21[1]));
		fRec54[0] = (fConst30 * ((fConst31 * fRec54[1]) + (0.025000000000000001 * (fRec22[0] - fRec22[1]))));
		double fTemp16 = (iSlow5 ? fRec54[0] : fRec21[0]);
		fRec55[0] = (fSlow7 + (0.999 * fRec55[1]));
		double fTemp17 = (fTemp16 * fRec55[0]);
		double fTemp18 = std::fabs(fTemp17);
		fRec56[0] = ((0.99990000000000001 * fRec56[1]) + (9.9999999999988987e-05 * fTemp18));
		double fTemp19 = std::max<double>(fRec56[0], fTemp18);
		fVec6[(IOTA & 32767)] = fTemp19;
		fRec58[0] = ((fTemp19 + fRec58[1]) - fVec6[((IOTA - iConst39) & 32767)]);
		fRec57[0] = ((0.999 * fRec57[1]) + (fConst38 * fRec58[0]));
		double fTemp20 = std::max<double>(-1.0, std::min<double>(-0.01, (fTemp19 + (-1.0 - (1.02 * fRec57[0])))));
		double fTemp21 = (fTemp17 - fTemp20);
		double fTemp22 = (40.100000000000001 * fTemp21);
		double fTemp23 = std::max<double>(-600.0, fTemp22);
		double fTemp24 = (0.0 - (40.100000000000001 * fTemp20));
		double fTemp25 = std::max<double>(-600.0, fTemp24);
		double fTemp26 = (((std::fabs(fTemp22) > 0.0001) ? ((fTemp23 < -50.0) ? (0.0 - (fTemp23 * std::exp(fTemp23))) : (fTemp23 / (1.0 - std::exp((-1.0 * fTemp23))))) : ((fTemp21 * ((134.00083333333336 * fTemp21) + 20.050000000000001)) + 1.0)) - ((std::fabs(fTemp24) > 0.0001) ? ((fTemp25 < -50.0) ? (0.0 - (fTemp25 * std::exp(fTemp25))) : (fTemp25 / (1.0 - std::exp((-1.0 * fTemp25))))) : ((fTemp24 * ((0.083333333333333329 * fTemp24) + 0.5)) + 1.0)));
		fRec20[0] = ((0.024937655860349125 * fTemp26) - (fConst23 * ((fConst40 * fRec20[2]) + (fConst41 * fRec20[1]))));
		double fTemp27 = (fRec20[2] + (fRec20[0] + (2.0 * fRec20[1])));
		fVec7[0] = fTemp27;
		fRec19[0] = ((fConst23 * ((fConst4 * fTemp27) + (fConst27 * fVec7[1]))) - (fConst28 * fRec19[1]));
		fRec18[0] = (0.0 - (fConst19 * ((fConst20 * fRec18[1]) - (fRec19[0] + fRec19[1]))));
		fRec17[0] = (fRec18[0] - (fConst15 * ((fConst42 * fRec17[2]) + (fConst45 * fRec17[1]))));
		double fTemp28 = (fRec17[2] + (fRec17[0] + (2.0 * fRec17[1])));
		fVec8[0] = fTemp28;
		fRec16[0] = ((fConst15 * ((fConst17 * fTemp28) + (fConst46 * fVec8[1]))) - (fConst48 * fRec16[1]));
		fRec15[0] = (fRec16[0] - (fConst10 * ((fConst49 * fRec15[2]) + (fConst50 * fRec15[1]))));
		double fTemp29 = (fConst60 * fRec14[1]);
		fRec14[0] = ((fConst10 * (((fConst12 * fRec15[0]) + (fConst51 * fRec15[1])) + (fConst12 * fRec15[2]))) - (fConst55 * ((fConst57 * fRec14[2]) + fTemp29)));
		double fTemp30 = std::max<double>(-1.0, std::min<double>(1.0, (fSlow4 * (fRec14[2] + (fConst55 * (fTemp29 + (fConst57 * fRec14[0])))))));
		fRec62[0] = ((fConst61 * fRec19[1]) - (fConst19 * ((fConst20 * fRec62[1]) - (fConst14 * fRec19[0]))));
		fRec61[0] = (fRec62[0] - (fConst15 * ((fConst42 * fRec61[2]) + (fConst45 * fRec61[1]))));
		double fTemp31 = (fConst50 * fRec60[1]);
		fRec60[0] = ((fConst15 * (((fConst44 * fRec61[0]) + (fConst62 * fRec61[1])) + (fConst44 * fRec61[2]))) - (fConst63 * ((fConst64 * fRec60[2]) + fTemp31)));
		double fTemp32 = (fConst60 * fRec59[1]);
		fRec59[0] = ((fRec60[2] + (fConst63 * (fTemp31 + (fConst64 * fRec60[0])))) - (fConst55 * ((fConst57 * fRec59[2]) + fTemp32)));
		double fTemp33 = std::max<double>(-1.0, std::min<double>(1.0, (fSlow8 * (fRec59[2] + (fConst55 * (fTemp32 + (fConst57 * fRec59[0])))))));
		fRec66[0] = (0.0 - (fConst67 * ((fConst47 * fRec66[1]) - (fConst15 * (fTemp28 + fVec8[1])))));
		fRec65[0] = (fRec66[0] - (fConst10 * ((fConst49 * fRec65[2]) + (fConst50 * fRec65[1]))));
		double fTemp34 = (fRec65[2] + (fRec65[0] + (2.0 * fRec65[1])));
		fVec9[0] = fTemp34;
		fRec64[0] = ((fConst10 * ((fConst66 * fTemp34) + (fConst68 * fVec9[1]))) - (fConst69 * fRec64[1]));
		fRec63[0] = (fRec64[0] - (fConst65 * ((fConst70 * fRec63[2]) + (fConst60 * fRec63[1]))));
		double fTemp35 = std::max<double>(-1.0, std::min<double>(1.0, (fSlow9 * (((fConst59 * fRec63[0]) + (fConst71 * fRec63[1])) + (fConst59 * fRec63[2])))));
		fRec68[0] = (0.0 - (fConst72 * ((fConst56 * fRec68[1]) - (fConst10 * (fTemp34 + fVec9[1])))));
		fRec67[0] = (fRec68[0] - (fConst65 * ((fConst70 * fRec67[2]) + (fConst60 * fRec67[1]))));
		double fTemp36 = std::max<double>(-1.0, std::min<double>(1.0, (fSlow10 * (fRec67[2] + (fRec67[0] + (2.0 * fRec67[1]))))));
		double fTemp37 = (((1.333521432 * (fTemp30 * (1.0 - (0.33333333333333331 * mydsp_faustpower2_f(fTemp30))))) + (1.584893192 * ((fTemp33 * (1.0 - (0.33333333333333331 * mydsp_faustpower2_f(fTemp33)))) + (fTemp35 * (1.0 - (0.33333333333333331 * mydsp_faustpower2_f(fTemp35))))))) + (1.2589412 * (fTemp36 * (1.0 - (0.33333333333333331 * mydsp_faustpower2_f(fTemp36))))));
		fVec10[0] = fTemp37;
		fRec13[0] = (0.0 - (fConst6 * ((fConst7 * fRec13[1]) - (fTemp37 + fVec10[1]))));
		double fTemp38 = (1.0 - fRec55[0]);
		double fTemp39 = (fTemp16 * fTemp38);
		double fTemp40 = ((fSlow3 * fRec13[0]) + ((fTemp39 * ((fSlow11 * ((4.0 * (1.0 - std::fabs(fTemp39))) + -1.0)) + 1.0)) + (fSlow12 * fTemp26)));
		fVec11[0] = fTemp40;
		fRec12[0] = (0.0 - (fConst6 * ((fConst7 * fRec12[1]) - (fTemp40 + fVec11[1]))));
		fRec69[0] = (fSlow13 + (0.999 * fRec69[1]));
		double fTemp41 = (fRec12[0] * fRec69[0]);
		fVec12[0] = fTemp41;
		fRec11[0] = ((0.93028479253239138 * (fTemp41 + fVec12[1])) - (0.86056958506478287 * fRec11[1]));
		fRec10[0] = (fRec11[0] - ((1.8405051250752198 * fRec10[1]) + (0.86129424393186271 * fRec10[2])));
		double fTemp42 = (0.92544984225177063 * (fRec10[0] + fRec10[2]));
		double fTemp43 = (1.8508996845035413 * fRec10[1]);
		double fTemp44 = (fTemp43 + fTemp42);
		double fTemp45 = (fTemp44 / (double(Ranode(int(TUBE_TABLE_6V6_250k), double(fRec9[1]))) + 100000.0));
		fVec13[0] = fTemp45;
		fRec70[0] = (fConst6 * ((410.0 * (fTemp45 + fVec13[1])) - (fConst7 * fRec70[1])));
		fRec9[0] = (double(Ftube(int(TUBE_TABLE_6V6_250k), double(((fTemp42 + (fRec70[0] + fTemp43)) + -0.65976100000000004)))) + -89.08268292682925);
		fRec8[0] = ((0.025000000000000001 * ((fConst4 * fRec9[0]) + (fConst27 * fRec9[1]))) - (fConst28 * fRec8[1]));
		fRec71[0] = (fConst30 * ((fConst31 * fRec71[1]) + (0.025000000000000001 * (fRec9[0] - fRec9[1]))));
		double fTemp46 = (fTemp44 / (double(Ranode(int(TUBE_TABLE_6V6_68k), double(fRec73[1]))) + 100000.0));
		fVec14[0] = fTemp46;
		fRec74[0] = (fConst6 * ((410.0 * (fTemp46 + fVec14[1])) - (fConst7 * fRec74[1])));
		fRec73[0] = (double(Ftube(int(TUBE_TABLE_6V6_68k), double(((fTemp42 + (fRec74[0] + fTemp43)) + -0.66454100000000005)))) + -87.916829268292673);
		fRec72[0] = ((0.025000000000000001 * ((fConst4 * fRec73[0]) + (fConst27 * fRec73[1]))) - (fConst28 * fRec72[1]));
		fRec75[0] = (fConst30 * ((fConst31 * fRec75[1]) + (0.025000000000000001 * (fRec73[0] - fRec73[1]))));
		double fTemp47 = (std::min<double>(0.69999999999999996, (iSlow0 ? fRec71[0] : fRec8[0])) + std::max<double>(-0.75, (iSlow0 ? fRec75[0] : fRec72[0])));
		double fTemp48 = (0.5 * fRec0[1]);
		double fTemp49 = (0.40000000000000002 * fRec2[1]);
		double fTemp50 = (fTemp48 + ((0.29999999999999999 * fRec4[1]) + fTemp49));
		double fTemp51 = ((fTemp47 + (0.20000000000000001 * fRec6[1])) - fTemp50);
		fRec6[0] = fTemp51;
		double fRec7 = (0.0 - (0.20000000000000001 * fTemp51));
		fRec4[0] = (fRec7 + fRec6[1]);
		double fRec5 = (0.29999999999999999 * (fTemp47 - fTemp50));
		fRec2[0] = (fRec5 + fRec4[1]);
		double fRec3 = (0.40000000000000002 * (fTemp47 - (fTemp49 + fTemp48)));
		fRec0[0] = (fRec3 + fRec2[1]);
		double fRec1 = (0.5 * (fTemp47 - fTemp48));
		output0[i0] = FAUSTFLOAT((fRec1 + fRec0[1]));
		fRec105[0] = ((0.93028479253239138 * (fRec101[1] + fRec101[2])) - (0.86056958506478287 * fRec105[1]));
		fRec104[0] = (fRec105[0] - ((1.8405051250752198 * fRec104[1]) + (0.86129424393186271 * fRec104[2])));
		double fTemp52 = (0.92544984225177063 * (fRec104[0] + fRec104[2]));
		double fTemp53 = (1.8508996845035413 * fRec104[1]);
		double fTemp54 = ((fTemp53 + fTemp52) / (double(Ranode(int(TUBE_TABLE_12AX7_250k), double(fRec103[1]))) + 100000.0));
		fVec15[0] = fTemp54;
		fRec106[0] = (fConst25 * ((820.0 * (fTemp54 + fVec15[1])) - (fConst26 * fRec106[1])));
		fRec103[0] = (double(Ftube(int(TUBE_TABLE_12AX7_250k), double(((fTemp52 + (fRec106[0] + fTemp53)) + -0.84070299999999998)))) + -147.47524390243905);
		fRec102[0] = ((0.025000000000000001 * ((fConst4 * fRec103[0]) + (fConst27 * fRec103[1]))) - (fConst28 * fRec102[1]));
		fRec107[0] = (fConst30 * ((fConst31 * fRec107[1]) + (0.025000000000000001 * (fRec103[0] - fRec103[1]))));
		fRec117[0] = ((0.93028479253239138 * (fRec113[1] + fRec113[2])) - (0.86056958506478287 * fRec117[1]));
		fRec116[0] = (fRec117[0] - ((1.8405051250752198 * fRec116[1]) + (0.86129424393186271 * fRec116[2])));
		double fTemp55 = (0.92544984225177063 * (fRec116[0] + fRec116[2]));
		double fTemp56 = (1.8508996845035413 * fRec116[1]);
		double fTemp57 = ((fTemp56 + fTemp55) / (double(Ranode(int(TUBE_TABLE_12AX7_250k), double(fRec115[1]))) + 100000.0));
		fVec16[0] = fTemp57;
		fRec118[0] = (fConst33 * ((1500.0 * (fTemp57 + fVec16[1])) - (fConst34 * fRec118[1])));
		fRec115[0] = (double(Ftube(int(TUBE_TABLE_12AX7_250k), double(((fTemp55 + (fRec118[0] + fTemp56)) + -1.204285)))) + -169.71433333333334);
		fRec114[0] = ((0.025000000000000001 * ((fConst4 * fRec115[0]) + (fConst27 * fRec115[1]))) - (fConst28 * fRec114[1]));
		fRec119[0] = (fConst30 * ((fConst31 * fRec119[1]) + (0.025000000000000001 * (fRec115[0] - fRec115[1]))));
		double fTemp58 = (double(input1[i0]) * fRec48[0]);
		fVec17[0] = fTemp58;
		fRec123[0] = ((0.93028479253239138 * (fTemp58 + fVec17[1])) - (0.86056958506478287 * fRec123[1]));
		fRec122[0] = (fRec123[0] - ((1.8405051250752198 * fRec122[1]) + (0.86129424393186271 * fRec122[2])));
		double fTemp59 = (0.92544984225177063 * (fRec122[0] + fRec122[2]));
		double fTemp60 = (1.8508996845035413 * fRec122[1]);
		double fTemp61 = ((fTemp60 + fTemp59) / (double(Ranode(int(TUBE_TABLE_12AX7_68k), double(fRec121[1]))) + 100000.0));
		fVec18[0] = fTemp61;
		fRec124[0] = (fConst36 * ((2700.0 * (fTemp61 + fVec18[1])) - (fConst37 * fRec124[1])));
		fRec121[0] = (double(Ftube(int(TUBE_TABLE_12AX7_68k), double(((fTemp59 + (fRec124[0] + fTemp60)) + -1.581656)))) + -191.42014814814814);
		fRec120[0] = ((0.025000000000000001 * ((fConst4 * fRec121[0]) + (fConst27 * fRec121[1]))) - (fConst28 * fRec120[1]));
		fRec125[0] = (fConst30 * ((fConst31 * fRec125[1]) + (0.025000000000000001 * (fRec121[0] - fRec121[1]))));
		fRec113[0] = ((0.59999999999999998 * (iSlow5 ? fRec119[0] : fRec114[0])) + (iSlow5 ? fRec125[0] : fRec120[0]));
		fRec112[0] = (0.0 - (fConst6 * ((fConst7 * fRec112[1]) - (fRec113[0] + fRec113[1]))));
		fRec111[0] = ((0.93028479253239138 * (fRec112[0] + fRec112[1])) - (0.86056958506478287 * fRec111[1]));
		fRec110[0] = (fRec111[0] - ((1.8405051250752198 * fRec110[1]) + (0.86129424393186271 * fRec110[2])));
		double fTemp62 = (0.92544984225177063 * (fRec110[0] + fRec110[2]));
		double fTemp63 = (1.8508996845035413 * fRec110[1]);
		double fTemp64 = ((fTemp63 + fTemp62) / (double(Ranode(int(TUBE_TABLE_12AX7_250k), double(fRec109[1]))) + 100000.0));
		fVec19[0] = fTemp64;
		fRec126[0] = (fConst33 * ((1500.0 * (fTemp64 + fVec19[1])) - (fConst34 * fRec126[1])));
		fRec109[0] = (double(Ftube(int(TUBE_TABLE_12AX7_250k), double(((fTemp62 + (fRec126[0] + fTemp63)) + -1.204285)))) + -169.71433333333334);
		fRec108[0] = ((0.025000000000000001 * ((fConst4 * fRec109[0]) + (fConst27 * fRec109[1]))) - (fConst28 * fRec108[1]));
		fRec127[0] = (fConst30 * ((fConst31 * fRec127[1]) + (0.025000000000000001 * (fRec109[0] - fRec109[1]))));
		fRec101[0] = ((0.59999999999999998 * (iSlow5 ? fRec107[0] : fRec102[0])) + (iSlow5 ? fRec127[0] : fRec108[0]));
		fRec100[0] = ((0.93028479253239138 * (fRec101[0] + fRec101[1])) - (0.86056958506478287 * fRec100[1]));
		fRec99[0] = (fRec100[0] - ((1.8405051250752198 * fRec99[1]) + (0.86129424393186271 * fRec99[2])));
		double fTemp65 = (0.92544984225177063 * (fRec99[0] + fRec99[2]));
		double fTemp66 = (1.8508996845035413 * fRec99[1]);
		double fTemp67 = ((fTemp66 + fTemp65) / (double(Ranode(int(TUBE_TABLE_12AX7_250k), double(fRec98[1]))) + 100000.0));
		fVec20[0] = fTemp67;
		fRec128[0] = (fConst25 * ((820.0 * (fTemp67 + fVec20[1])) - (fConst26 * fRec128[1])));
		fRec98[0] = (double(Ftube(int(TUBE_TABLE_12AX7_250k), double(((fTemp65 + (fRec128[0] + fTemp66)) + -0.84070299999999998)))) + -147.47524390243905);
		fRec97[0] = ((0.025000000000000001 * ((fConst4 * fRec98[0]) + (fConst27 * fRec98[1]))) - (fConst28 * fRec97[1]));
		fRec129[0] = (fConst30 * ((fConst31 * fRec129[1]) + (0.025000000000000001 * (fRec98[0] - fRec98[1]))));
		double fTemp68 = (iSlow5 ? fRec129[0] : fRec97[0]);
		double fTemp69 = (fRec55[0] * fTemp68);
		double fTemp70 = std::fabs(fTemp69);
		fRec130[0] = ((0.99990000000000001 * fRec130[1]) + (9.9999999999988987e-05 * fTemp70));
		double fTemp71 = std::max<double>(fRec130[0], fTemp70);
		fVec21[(IOTA & 32767)] = fTemp71;
		fRec132[0] = ((fTemp71 + fRec132[1]) - fVec21[((IOTA - iConst39) & 32767)]);
		fRec131[0] = ((0.999 * fRec131[1]) + (fConst38 * fRec132[0]));
		double fTemp72 = std::max<double>(-1.0, std::min<double>(-0.01, (fTemp71 + (-1.0 - (1.02 * fRec131[0])))));
		double fTemp73 = (fTemp69 - fTemp72);
		double fTemp74 = (40.100000000000001 * fTemp73);
		double fTemp75 = std::max<double>(-600.0, fTemp74);
		double fTemp76 = (0.0 - (40.100000000000001 * fTemp72));
		double fTemp77 = std::max<double>(-600.0, fTemp76);
		double fTemp78 = (((std::fabs(fTemp74) > 0.0001) ? ((fTemp75 < -50.0) ? (0.0 - (fTemp75 * std::exp(fTemp75))) : (fTemp75 / (1.0 - std::exp((-1.0 * fTemp75))))) : ((fTemp73 * ((134.00083333333336 * fTemp73) + 20.050000000000001)) + 1.0)) - ((std::fabs(fTemp76) > 0.0001) ? ((fTemp77 < -50.0) ? (0.0 - (fTemp77 * std::exp(fTemp77))) : (fTemp77 / (1.0 - std::exp((-1.0 * fTemp77))))) : ((fTemp76 * ((0.083333333333333329 * fTemp76) + 0.5)) + 1.0)));
		fRec96[0] = ((0.024937655860349125 * fTemp78) - (fConst23 * ((fConst40 * fRec96[2]) + (fConst41 * fRec96[1]))));
		double fTemp79 = (fRec96[2] + (fRec96[0] + (2.0 * fRec96[1])));
		fVec22[0] = fTemp79;
		fRec95[0] = ((fConst23 * ((fConst4 * fTemp79) + (fConst27 * fVec22[1]))) - (fConst28 * fRec95[1]));
		fRec94[0] = (0.0 - (fConst19 * ((fConst20 * fRec94[1]) - (fRec95[0] + fRec95[1]))));
		fRec93[0] = (fRec94[0] - (fConst15 * ((fConst42 * fRec93[2]) + (fConst45 * fRec93[1]))));
		double fTemp80 = (fRec93[2] + (fRec93[0] + (2.0 * fRec93[1])));
		fVec23[0] = fTemp80;
		fRec92[0] = ((fConst15 * ((fConst17 * fTemp80) + (fConst46 * fVec23[1]))) - (fConst48 * fRec92[1]));
		fRec91[0] = (fRec92[0] - (fConst10 * ((fConst49 * fRec91[2]) + (fConst50 * fRec91[1]))));
		double fTemp81 = (fConst60 * fRec90[1]);
		fRec90[0] = ((fConst10 * (((fConst12 * fRec91[0]) + (fConst51 * fRec91[1])) + (fConst12 * fRec91[2]))) - (fConst55 * ((fConst57 * fRec90[2]) + fTemp81)));
		double fTemp82 = std::max<double>(-1.0, std::min<double>(1.0, (fSlow4 * (fRec90[2] + (fConst55 * (fTemp81 + (fConst57 * fRec90[0])))))));
		fRec136[0] = ((fConst61 * fRec95[1]) - (fConst19 * ((fConst20 * fRec136[1]) - (fConst14 * fRec95[0]))));
		fRec135[0] = (fRec136[0] - (fConst15 * ((fConst42 * fRec135[2]) + (fConst45 * fRec135[1]))));
		double fTemp83 = (fConst50 * fRec134[1]);
		fRec134[0] = ((fConst15 * (((fConst44 * fRec135[0]) + (fConst62 * fRec135[1])) + (fConst44 * fRec135[2]))) - (fConst63 * ((fConst64 * fRec134[2]) + fTemp83)));
		double fTemp84 = (fConst60 * fRec133[1]);
		fRec133[0] = ((fRec134[2] + (fConst63 * (fTemp83 + (fConst64 * fRec134[0])))) - (fConst55 * ((fConst57 * fRec133[2]) + fTemp84)));
		double fTemp85 = std::max<double>(-1.0, std::min<double>(1.0, (fSlow8 * (fRec133[2] + (fConst55 * (fTemp84 + (fConst57 * fRec133[0])))))));
		fRec140[0] = (0.0 - (fConst67 * ((fConst47 * fRec140[1]) - (fConst15 * (fTemp80 + fVec23[1])))));
		fRec139[0] = (fRec140[0] - (fConst10 * ((fConst49 * fRec139[2]) + (fConst50 * fRec139[1]))));
		double fTemp86 = (fRec139[2] + (fRec139[0] + (2.0 * fRec139[1])));
		fVec24[0] = fTemp86;
		fRec138[0] = ((fConst10 * ((fConst66 * fTemp86) + (fConst68 * fVec24[1]))) - (fConst69 * fRec138[1]));
		fRec137[0] = (fRec138[0] - (fConst65 * ((fConst70 * fRec137[2]) + (fConst60 * fRec137[1]))));
		double fTemp87 = std::max<double>(-1.0, std::min<double>(1.0, (fSlow9 * (((fConst59 * fRec137[0]) + (fConst71 * fRec137[1])) + (fConst59 * fRec137[2])))));
		fRec142[0] = (0.0 - (fConst72 * ((fConst56 * fRec142[1]) - (fConst10 * (fTemp86 + fVec24[1])))));
		fRec141[0] = (fRec142[0] - (fConst65 * ((fConst70 * fRec141[2]) + (fConst60 * fRec141[1]))));
		double fTemp88 = std::max<double>(-1.0, std::min<double>(1.0, (fSlow10 * (fRec141[2] + (fRec141[0] + (2.0 * fRec141[1]))))));
		double fTemp89 = (((1.333521432 * (fTemp82 * (1.0 - (0.33333333333333331 * mydsp_faustpower2_f(fTemp82))))) + (1.584893192 * ((fTemp85 * (1.0 - (0.33333333333333331 * mydsp_faustpower2_f(fTemp85)))) + (fTemp87 * (1.0 - (0.33333333333333331 * mydsp_faustpower2_f(fTemp87))))))) + (1.2589412 * (fTemp88 * (1.0 - (0.33333333333333331 * mydsp_faustpower2_f(fTemp88))))));
		fVec25[0] = fTemp89;
		fRec89[0] = (0.0 - (fConst6 * ((fConst7 * fRec89[1]) - (fTemp89 + fVec25[1]))));
		double fTemp90 = (fTemp68 * fTemp38);
		double fTemp91 = ((fSlow3 * fRec89[0]) + ((fTemp90 * ((fSlow11 * ((4.0 * (1.0 - std::fabs(fTemp90))) + -1.0)) + 1.0)) + (fSlow12 * fTemp78)));
		fVec26[0] = fTemp91;
		fRec88[0] = (0.0 - (fConst6 * ((fConst7 * fRec88[1]) - (fTemp91 + fVec26[1]))));
		double fTemp92 = (fRec69[0] * fRec88[0]);
		fVec27[0] = fTemp92;
		fRec87[0] = ((0.93028479253239138 * (fTemp92 + fVec27[1])) - (0.86056958506478287 * fRec87[1]));
		fRec86[0] = (fRec87[0] - ((1.8405051250752198 * fRec86[1]) + (0.86129424393186271 * fRec86[2])));
		double fTemp93 = (0.92544984225177063 * (fRec86[0] + fRec86[2]));
		double fTemp94 = (1.8508996845035413 * fRec86[1]);
		double fTemp95 = (fTemp94 + fTemp93);
		double fTemp96 = (fTemp95 / (double(Ranode(int(TUBE_TABLE_6V6_250k), double(fRec85[1]))) + 100000.0));
		fVec28[0] = fTemp96;
		fRec143[0] = (fConst6 * ((410.0 * (fTemp96 + fVec28[1])) - (fConst7 * fRec143[1])));
		fRec85[0] = (double(Ftube(int(TUBE_TABLE_6V6_250k), double(((fTemp93 + (fRec143[0] + fTemp94)) + -0.65976100000000004)))) + -89.08268292682925);
		fRec84[0] = ((0.025000000000000001 * ((fConst4 * fRec85[0]) + (fConst27 * fRec85[1]))) - (fConst28 * fRec84[1]));
		fRec144[0] = (fConst30 * ((fConst31 * fRec144[1]) + (0.025000000000000001 * (fRec85[0] - fRec85[1]))));
		double fTemp97 = (fTemp95 / (double(Ranode(int(TUBE_TABLE_6V6_68k), double(fRec146[1]))) + 100000.0));
		fVec29[0] = fTemp97;
		fRec147[0] = (fConst6 * ((410.0 * (fTemp97 + fVec29[1])) - (fConst7 * fRec147[1])));
		fRec146[0] = (double(Ftube(int(TUBE_TABLE_6V6_68k), double(((fTemp93 + (fRec147[0] + fTemp94)) + -0.66454100000000005)))) + -87.916829268292673);
		fRec145[0] = ((0.025000000000000001 * ((fConst4 * fRec146[0]) + (fConst27 * fRec146[1]))) - (fConst28 * fRec145[1]));
		fRec148[0] = (fConst30 * ((fConst31 * fRec148[1]) + (0.025000000000000001 * (fRec146[0] - fRec146[1]))));
		double fTemp98 = (std::min<double>(0.69999999999999996, (iSlow0 ? fRec144[0] : fRec84[0])) + std::max<double>(-0.75, (iSlow0 ? fRec148[0] : fRec145[0])));
		double fTemp99 = (0.5 * fRec76[1]);
		double fTemp100 = (0.40000000000000002 * fRec78[1]);
		double fTemp101 = (fTemp99 + ((0.29999999999999999 * fRec80[1]) + fTemp100));
		double fTemp102 = ((fTemp98 + (0.20000000000000001 * fRec82[1])) - fTemp101);
		fRec82[0] = fTemp102;
		double fRec83 = (0.0 - (0.20000000000000001 * fTemp102));
		fRec80[0] = (fRec83 + fRec82[1]);
		double fRec81 = (0.29999999999999999 * (fTemp98 - fTemp101));
		fRec78[0] = (fRec81 + fRec80[1]);
		double fRec79 = (0.40000000000000002 * (fTemp98 - (fTemp100 + fTemp99)));
		fRec76[0] = (fRec79 + fRec78[1]);
		double fRec77 = (0.5 * (fTemp98 - fTemp99));
		output1[i0] = FAUSTFLOAT((fRec77 + fRec76[1]));
		fRec29[1] = fRec29[0];
		fRec28[2] = fRec28[1];
		fRec28[1] = fRec28[0];
		fVec0[1] = fVec0[0];
		fRec30[1] = fRec30[0];
		fRec27[1] = fRec27[0];
		fRec26[1] = fRec26[0];
		fRec31[1] = fRec31[0];
		fRec41[1] = fRec41[0];
		fRec40[2] = fRec40[1];
		fRec40[1] = fRec40[0];
		fVec1[1] = fVec1[0];
		fRec42[1] = fRec42[0];
		fRec39[1] = fRec39[0];
		fRec38[1] = fRec38[0];
		fRec43[1] = fRec43[0];
		fRec48[1] = fRec48[0];
		fVec2[1] = fVec2[0];
		fRec47[1] = fRec47[0];
		fRec46[2] = fRec46[1];
		fRec46[1] = fRec46[0];
		fVec3[1] = fVec3[0];
		fRec49[1] = fRec49[0];
		fRec45[1] = fRec45[0];
		fRec44[1] = fRec44[0];
		fRec50[1] = fRec50[0];
		fRec37[2] = fRec37[1];
		fRec37[1] = fRec37[0];
		fRec36[1] = fRec36[0];
		fRec35[1] = fRec35[0];
		fRec34[2] = fRec34[1];
		fRec34[1] = fRec34[0];
		fVec4[1] = fVec4[0];
		fRec51[1] = fRec51[0];
		fRec33[1] = fRec33[0];
		fRec32[1] = fRec32[0];
		fRec52[1] = fRec52[0];
		fRec25[2] = fRec25[1];
		fRec25[1] = fRec25[0];
		fRec24[1] = fRec24[0];
		fRec23[2] = fRec23[1];
		fRec23[1] = fRec23[0];
		fVec5[1] = fVec5[0];
		fRec53[1] = fRec53[0];
		fRec22[1] = fRec22[0];
		fRec21[1] = fRec21[0];
		fRec54[1] = fRec54[0];
		fRec55[1] = fRec55[0];
		fRec56[1] = fRec56[0];
		IOTA = (IOTA + 1);
		fRec58[1] = fRec58[0];
		fRec57[1] = fRec57[0];
		fRec20[2] = fRec20[1];
		fRec20[1] = fRec20[0];
		fVec7[1] = fVec7[0];
		fRec19[1] = fRec19[0];
		fRec18[1] = fRec18[0];
		fRec17[2] = fRec17[1];
		fRec17[1] = fRec17[0];
		fVec8[1] = fVec8[0];
		fRec16[1] = fRec16[0];
		fRec15[2] = fRec15[1];
		fRec15[1] = fRec15[0];
		fRec14[2] = fRec14[1];
		fRec14[1] = fRec14[0];
		fRec62[1] = fRec62[0];
		fRec61[2] = fRec61[1];
		fRec61[1] = fRec61[0];
		fRec60[2] = fRec60[1];
		fRec60[1] = fRec60[0];
		fRec59[2] = fRec59[1];
		fRec59[1] = fRec59[0];
		fRec66[1] = fRec66[0];
		fRec65[2] = fRec65[1];
		fRec65[1] = fRec65[0];
		fVec9[1] = fVec9[0];
		fRec64[1] = fRec64[0];
		fRec63[2] = fRec63[1];
		fRec63[1] = fRec63[0];
		fRec68[1] = fRec68[0];
		fRec67[2] = fRec67[1];
		fRec67[1] = fRec67[0];
		fVec10[1] = fVec10[0];
		fRec13[1] = fRec13[0];
		fVec11[1] = fVec11[0];
		fRec12[1] = fRec12[0];
		fRec69[1] = fRec69[0];
		fVec12[1] = fVec12[0];
		fRec11[1] = fRec11[0];
		fRec10[2] = fRec10[1];
		fRec10[1] = fRec10[0];
		fVec13[1] = fVec13[0];
		fRec70[1] = fRec70[0];
		fRec9[1] = fRec9[0];
		fRec8[1] = fRec8[0];
		fRec71[1] = fRec71[0];
		fVec14[1] = fVec14[0];
		fRec74[1] = fRec74[0];
		fRec73[1] = fRec73[0];
		fRec72[1] = fRec72[0];
		fRec75[1] = fRec75[0];
		fRec6[1] = fRec6[0];
		fRec4[1] = fRec4[0];
		fRec2[1] = fRec2[0];
		fRec0[1] = fRec0[0];
		fRec105[1] = fRec105[0];
		fRec104[2] = fRec104[1];
		fRec104[1] = fRec104[0];
		fVec15[1] = fVec15[0];
		fRec106[1] = fRec106[0];
		fRec103[1] = fRec103[0];
		fRec102[1] = fRec102[0];
		fRec107[1] = fRec107[0];
		fRec117[1] = fRec117[0];
		fRec116[2] = fRec116[1];
		fRec116[1] = fRec116[0];
		fVec16[1] = fVec16[0];
		fRec118[1] = fRec118[0];
		fRec115[1] = fRec115[0];
		fRec114[1] = fRec114[0];
		fRec119[1] = fRec119[0];
		fVec17[1] = fVec17[0];
		fRec123[1] = fRec123[0];
		fRec122[2] = fRec122[1];
		fRec122[1] = fRec122[0];
		fVec18[1] = fVec18[0];
		fRec124[1] = fRec124[0];
		fRec121[1] = fRec121[0];
		fRec120[1] = fRec120[0];
		fRec125[1] = fRec125[0];
		fRec113[2] = fRec113[1];
		fRec113[1] = fRec113[0];
		fRec112[1] = fRec112[0];
		fRec111[1] = fRec111[0];
		fRec110[2] = fRec110[1];
		fRec110[1] = fRec110[0];
		fVec19[1] = fVec19[0];
		fRec126[1] = fRec126[0];
		fRec109[1] = fRec109[0];
		fRec108[1] = fRec108[0];
		fRec127[1] = fRec127[0];
		fRec101[2] = fRec101[1];
		fRec101[1] = fRec101[0];
		fRec100[1] = fRec100[0];
		fRec99[2] = fRec99[1];
		fRec99[1] = fRec99[0];
		fVec20[1] = fVec20[0];
		fRec128[1] = fRec128[0];
		fRec98[1] = fRec98[0];
		fRec97[1] = fRec97[0];
		fRec129[1] = fRec129[0];
		fRec130[1] = fRec130[0];
		fRec132[1] = fRec132[0];
		fRec131[1] = fRec131[0];
		fRec96[2] = fRec96[1];
		fRec96[1] = fRec96[0];
		fVec22[1] = fVec22[0];
		fRec95[1] = fRec95[0];
		fRec94[1] = fRec94[0];
		fRec93[2] = fRec93[1];
		fRec93[1] = fRec93[0];
		fVec23[1] = fVec23[0];
		fRec92[1] = fRec92[0];
		fRec91[2] = fRec91[1];
		fRec91[1] = fRec91[0];
		fRec90[2] = fRec90[1];
		fRec90[1] = fRec90[0];
		fRec136[1] = fRec136[0];
		fRec135[2] = fRec135[1];
		fRec135[1] = fRec135[0];
		fRec134[2] = fRec134[1];
		fRec134[1] = fRec134[0];
		fRec133[2] = fRec133[1];
		fRec133[1] = fRec133[0];
		fRec140[1] = fRec140[0];
		fRec139[2] = fRec139[1];
		fRec139[1] = fRec139[0];
		fVec24[1] = fVec24[0];
		fRec138[1] = fRec138[0];
		fRec137[2] = fRec137[1];
		fRec137[1] = fRec137[0];
		fRec142[1] = fRec142[0];
		fRec141[2] = fRec141[1];
		fRec141[1] = fRec141[0];
		fVec25[1] = fVec25[0];
		fRec89[1] = fRec89[0];
		fVec26[1] = fVec26[0];
		fRec88[1] = fRec88[0];
		fVec27[1] = fVec27[0];
		fRec87[1] = fRec87[0];
		fRec86[2] = fRec86[1];
		fRec86[1] = fRec86[0];
		fVec28[1] = fVec28[0];
		fRec143[1] = fRec143[0];
		fRec85[1] = fRec85[0];
		fRec84[1] = fRec84[0];
		fRec144[1] = fRec144[0];
		fVec29[1] = fVec29[0];
		fRec147[1] = fRec147[0];
		fRec146[1] = fRec146[0];
		fRec145[1] = fRec145[0];
		fRec148[1] = fRec148[0];
		fRec82[1] = fRec82[0];
		fRec80[1] = fRec80[0];
		fRec78[1] = fRec78[0];
		fRec76[1] = fRec76[0];
	}
#undef fCheckbox0
#undef fVslider0
#undef fCheckbox1
#undef fVslider1
#undef fVslider2
#undef fVslider3
}

void __rt_func Dsp::compute_static(int count, FAUSTFLOAT *input0, FAUSTFLOAT *input1, FAUSTFLOAT *output0, FAUSTFLOAT *output1, PluginLV2 *p)
{
	static_cast<Dsp*>(p)->compute(count, input0, input1, output0, output1);
}


void Dsp::connect(uint32_t port,void* data)
{
	switch ((PortIndex)port)
	{
	case HIGHGAIN: 
		fCheckbox1_ = (float*)data; // , 0.0, 0.0, 1.0, 1.0 
		fCheckbox0_ = (float*)data; // , 0.0, 0.0, 1.0, 1.0 
		break;
	case DRIVE: 
		fVslider0_ = (float*)data; // , 0.34999999999999998, 0.0, 1.0, 0.01 
		break;
	case WET_DRY: 
		fVslider2_ = (float*)data; // , 100.0, 0.0, 100.0, 1.0 
		break;
	case PREGAIN: 
		fVslider1_ = (float*)data; // , -6.0, -20.0, 20.0, 0.10000000000000001 
		break;
	case GAIN1: 
		fVslider3_ = (float*)data; // , -6.0, -20.0, 20.0, 0.10000000000000001 
		break;
	default:
		break;
	}
}

void Dsp::connect_static(uint32_t port,void* data, PluginLV2 *p)
{
	static_cast<Dsp*>(p)->connect(port, data);
}


PluginLV2 *plugin() {
	return new Dsp();
}

void Dsp::del_instance(PluginLV2 *p)
{
	delete static_cast<Dsp*>(p);
}

/*
typedef enum
{
   DRIVE, 
   WET_DRY, 
   HIGHGAIN, 
   PREGAIN, 
   GAIN1, 
} PortIndex;
*/

} // end namespace gxamp7_stereo
