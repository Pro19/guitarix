declare id "tiltdrive";
declare name "Tilt Tone Pro";
declare category "External";

import("stdfaust.lib");


p1 = pre : fi.iir((b0/a0,b1/a0,b2/a0),(a1/a0,a2/a0)) : tiltdrivepro_inclip with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    b0 = fs*(-2.52529851047033e-8*fs - 4.20883085078388e-6);

    b1 = 5.05059702094065e-8*pow(fs,2);

    b2 = fs*(-2.52529851047033e-8*fs + 4.20883085078388e-6);

    a0 = fs*(4.3087078246642e-10*fs + 1.51472693595286e-7) + 3.02790479408863e-6;

    a1 = -8.6174156493284e-10*pow(fs,2) + 6.05580958817726e-6;

    a2 = fs*(4.3087078246642e-10*fs - 1.51472693595286e-7) + 3.02790479408863e-6;
};

tiltdrivepro_inclip = _<: ba.if(signbit(_), tiltdrivepro_in_neg_clip, tiltdrivepro_in_clip) :>_ with {

    signbit = ffunction(int signbit(float), "math.h", "");

    tiltdrivepro_in_clip = ffunction(float tiltdrivepro_inclip(float), "tiltdrivepro_in_table.h", "");

    tiltdrivepro_in_neg_clip = ffunction(float tiltdrivepro_in_negclip(float), "tiltdrivepro_in_neg_table.h", "");

};

p2 = pre : fi.iir((b0/a0,b1/a0,b2/a0),(a1/a0,a2/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;



    Body = vslider("Body[name:Body]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);

    Tone = vslider("Tone[name:Tone]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s);

    Drive = vslider("Drive[name:Drive]", 0.5, 0, 1, 0.01) : Inverted(1) : LogPot(1) : si.smooth(s);

    b0 = Body*(Drive*(-9.54689252926595e-7*fs - 4.41985765243795e-5) + Tone*(Drive*fs*(-4.67399946745312e-10*fs + 7.38965801936352e-22) + fs*(4.67399946745312e-10*fs - 7.38965801936352e-22)) + 9.54689252926595e-7*fs + 4.41985765243795e-5) + Drive*(-1.26018981386311e-7*fs - 0.000447819977345013) + Tone*(Drive*(fs*(-6.16967929703812e-11*fs + 9.75434858555984e-23) + 0.000441985765243795) + fs*(6.16967929703812e-11*fs - 9.75434858555984e-23) - 0.000441985765243795) + 1.26018981386311e-7*fs + 0.000447819977345013;

    b1 = Body*(-8.8397153048759e-5*Drive + Tone*(9.34799893490624e-10*Drive*pow(fs,2) - 9.34799893490624e-10*pow(fs,2)) + 8.8397153048759e-5) - 0.000895639954690026*Drive + Tone*(Drive*(1.23393585940762e-10*pow(fs,2) + 0.000883971530487589) - 1.23393585940762e-10*pow(fs,2) - 0.000883971530487589) + 0.000895639954690026;

    b2 = Body*(Drive*(9.54689252926595e-7*fs - 4.41985765243795e-5) + Tone*(Drive*fs*(-4.67399946745312e-10*fs - 7.38965801936352e-22) + fs*(4.67399946745312e-10*fs + 7.38965801936352e-22)) - 9.54689252926595e-7*fs + 4.41985765243795e-5) + Drive*(1.26018981386311e-7*fs - 0.000447819977345013) + Tone*(Drive*(fs*(-6.16967929703812e-11*fs - 9.75434858555984e-23) + 0.000441985765243795) + fs*(6.16967929703812e-11*fs + 9.75434858555984e-23) - 0.000441985765243795) - 1.26018981386311e-7*fs + 0.000447819977345013;

    a0 = Body*(Drive*(Drive*(fs*(-4.67399946745312e-10*fs - 1.01700924582597e-6) - 4.41985765243794e-5) + fs*(4.67399946745312e-10*fs + 8.61209263577532e-7) + 2.34252455579211e-5) + Tone*(Drive*(fs*(-1.16849986686328e-10*fs + 5.73476530403822e-8) - 1.10496441310948e-5) + Tone*(Drive*fs*(1.16849986686328e-10*fs + 8.28723309832113e-8) + fs*(-2.33699973372656e-10*fs - 1.65744661966423e-7)) + fs*(2.33699973372656e-10*fs - 1.14695306080764e-7) + 2.20992882621897e-5) + fs*(4.67399946745312e-10*fs + 1.32860921032284e-6) + 8.5745238457296e-5) + Drive*(Drive*(fs*(-6.16967929703812e-11*fs - 7.57445149442777e-7) - 0.00127875321600334) + fs*(6.16967929703812e-11*fs + 7.36879551785984e-7) + 0.00106827782665119) + Tone*(Drive*(fs*(-1.54241982425953e-11*fs - 1.48230092047107e-7) + 9.57783153283301e-5) + Tone*(Drive*(fs*(1.54241982425953e-11*fs + 1.66739129938221e-7) + 0.000110496441310948) + fs*(-3.08483964851906e-11*fs - 3.33478259876442e-7) - 0.000220992882621897) + fs*(3.08483964851906e-11*fs + 2.96460184094214e-7) - 0.00019155663065666) + fs*(6.16967929703812e-11*fs + 7.98576344756365e-7) + 0.00169970399470766;

    a1 = Body*(Drive*(Drive*(9.34799893490624e-10*pow(fs,2) - 8.83971530487588e-5) - 9.34799893490624e-10*pow(fs,2) + 4.68504911158421e-5) + Tone*(Drive*(2.33699973372656e-10*pow(fs,2) - 2.20992882621897e-5) + Tone*(-2.33699973372656e-10*Drive*pow(fs,2) + 4.67399946745312e-10*pow(fs,2)) - 4.67399946745312e-10*pow(fs,2) + 4.41985765243794e-5) - 9.34799893490624e-10*pow(fs,2) + 0.000171490476914592) + Drive*(Drive*(1.23393585940762e-10*pow(fs,2) - 0.00255750643200669) - 1.23393585940762e-10*pow(fs,2) + 0.00213655565330238) + Tone*(Drive*(3.08483964851906e-11*pow(fs,2) + 0.00019155663065666) + Tone*(Drive*(-3.08483964851906e-11*pow(fs,2) + 0.000220992882621897) + 6.16967929703812e-11*pow(fs,2) - 0.000441985765243794) - 6.16967929703812e-11*pow(fs,2) - 0.00038311326131332) - 1.23393585940762e-10*pow(fs,2) + 0.00339940798941531;

    a2 = Body*(Drive*(Drive*(fs*(-4.67399946745312e-10*fs + 1.01700924582597e-6) - 4.41985765243794e-5) + fs*(4.67399946745312e-10*fs - 8.61209263577532e-7) + 2.34252455579211e-5) + Tone*(Drive*(fs*(-1.16849986686328e-10*fs - 5.73476530403822e-8) - 1.10496441310948e-5) + Tone*(Drive*fs*(1.16849986686328e-10*fs - 8.28723309832113e-8) + fs*(-2.33699973372656e-10*fs + 1.65744661966423e-7)) + fs*(2.33699973372656e-10*fs + 1.14695306080764e-7) + 2.20992882621897e-5) + fs*(4.67399946745312e-10*fs - 1.32860921032284e-6) + 8.5745238457296e-5) + Drive*(Drive*(fs*(-6.16967929703812e-11*fs + 7.57445149442777e-7) - 0.00127875321600334) + fs*(6.16967929703812e-11*fs - 7.36879551785984e-7) + 0.00106827782665119) + Tone*(Drive*(fs*(-1.54241982425953e-11*fs + 1.48230092047107e-7) + 9.57783153283301e-5) + Tone*(Drive*(fs*(1.54241982425953e-11*fs - 1.66739129938221e-7) + 0.000110496441310948) + fs*(-3.08483964851906e-11*fs + 3.33478259876442e-7) - 0.000220992882621897) + fs*(3.08483964851906e-11*fs - 2.96460184094214e-7) - 0.00019155663065666) + fs*(6.16967929703812e-11*fs - 7.98576344756365e-7) + 0.00169970399470766;
};

p3 = pre : fi.iir((b0/a0,b1/a0,b2/a0),(a1/a0,a2/a0)) : tiltdrivepro_out_3clip with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Level = vslider("Level[name:Level]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(3) : si.smooth(s);

    b0 = Level*fs*(-5.11885580228361e-9*fs - 6.82514106971154e-8);

    b1 = 1.02377116045672e-8*Level*pow(fs,2);

    b2 = Level*fs*(-5.11885580228361e-9*fs + 6.82514106971154e-8);

    a0 = fs*(4.33598469656009e-10*fs + 2.06017394709431e-8) + 2.42417950077212e-7;

    a1 = -8.67196939312018e-10*pow(fs,2) + 4.84835900154423e-7;

    a2 = fs*(4.33598469656009e-10*fs - 2.06017394709431e-8) + 2.42417950077212e-7;
};

tiltdrivepro_out_3clip = _<: ba.if(signbit(_), tiltdrivepro_out_3_neg_clip, tiltdrivepro_out_3_clip) :>_ with {

    signbit = ffunction(int signbit(float), "math.h", "");

    tiltdrivepro_out_3_clip = ffunction(float tiltdrivepro_out_3clip(float), "tiltdrivepro_out_3_table.h", "");

    tiltdrivepro_out_3_neg_clip = ffunction(float tiltdrivepro_out_3_negclip(float), "tiltdrivepro_out_3_neg_table.h", "");

};

amp =  p1 : p2 : p3 ;
freq_split = fi.filterbank(3, (86.0,210.0,1200.0,6531.0));
process    = freq_split: ( amp , amp , amp, amp, amp) :>_;
